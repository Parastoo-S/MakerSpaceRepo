<section id="page-contents">

  <% if flash[:notice] %>
    <div id="notice"><%= flash[:notice] %></div>
  <% end %>

  <% if flash[:alert] %>
    <div id="alert"><%= flash[:alert] %></div>
  <% end %>

      <div class="setting-title">Training Sessions Manager</div>
      <br>
      <input type="text" id="query" onkeyup="findSession()" placeholder=" Find by: date, training, course, username  ">

      <br></br>
      <table id="sessions-table">
        <tr>
          <th>Date
            <button class="sort-arrow" onclick="sortTable(0)"><div class="arrow-down"></div></button></th>
          <th>Training
            <button class="sort-arrow" onclick="sortTable(1)"><div class="arrow-down"></div></button></th>
          <th>Trainer
            <button class="sort-arrow" onclick="sortTable(2)"><div class="arrow-down"></div></button></th>
          <th>Course
            <button class="sort-arrow" onclick="sortTable(3)"><div class="arrow-down"></div></button></th>
          <th>Status
            <button class="sort-arrow" onclick="sortTable(4)"><div class="arrow-down"></div></button></th>
          <th>Users</th>
          <th class="action-header">Action</th>

        </tr>

        <tbody>
        <% @sessions = TrainingSession.all.paginate(:page => params[:page], :per_page => 20) %>
        <%= will_paginate @sessions %>
        <% @sessions.each do |sesh| %>
          <tr>
            <td class="date-cell">
              <%= sesh.created_at.strftime("%I:%M %p").downcase() %>
              <br>
              <%= sesh.created_at.strftime("%b %e %Y").downcase() %>
            </td>

            <td class="training-cell">
              <%= sesh.training.name %>
            </td>

            <td class="trainer-cell" style="horizontal-alginment:center;">
              <%= link_to sesh.user.name, user_url(sesh.user.username) %>
            <!--  <%= select_tag 'training_session[user_id]', options_from_collection_for_select(User.where('role LIKE \'staff\' or role LIKE \'admin\''), 'id', 'name'), prompt: "change" %><br> -->
            </td>

            <td class="course-cell">
              <%= sesh.course %>
            </td>

            <td class="status-cell">
              <% if sesh.users.first.certifications.include? Certification.find_by(training_session_id: sesh.id) %>
                COMPLETE
              <% else %>
                INCOMPLETE
              <% end %>
            </td>

            <td class="users-cell">
                <div
                 class="users-count"
                 style="display:inline" >
                 <div class="count-holder" style="display:inline">
                  <%= sesh.users.length %>
                  <div id="sesh-users" style="display:inline">
                    <% sesh.users.each do |user| %>
                      <div class="clickable-username">
                        <%=link_to user.name, user_url(user.username), class: "user-link" %> <br>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            </td>

            <td class="action-cell">
              <%=link_to "Visit", staff_training_session_url(sesh), class:"visit-button" %>
              <%=link_to "Destroy", { action: :destroy, id: sesh.id }, method: :delete, data: { confirm: 'Deleting a training session also deletes all corresponding certifications. OK to confirm.' }, class:"destroy-button"%>
            </td>

          </tr>
        <% end %>
        </tbody>
      </table>

</section>

<script>

  var sort_direction = 1;

  function findSession() {
    var input, filter, table, tr, i;
    input = document.getElementById("query");
    filter = input.value.toUpperCase();
    table = document.getElementById("sessions-table");
    tr = document.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
      td0 = tr[i].getElementsByTagName("td")[0]; //match date
      td1 = tr[i].getElementsByTagName("td")[1]; //match training
      td2 = tr[i].getElementsByTagName("td")[2]; //match trainer
      td3 = tr[i].getElementsByTagName("td")[3]; //match course
      td4 = tr[i].getElementsByTagName("td")[4];
      current_staff = tr[i].getElementsByTagName("current_staff")[0]
      if (td1) {
        if (td0.innerHTML.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else if (td1.innerHTML.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else if (current_staff.innerHTML.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        }else if (td3.innerHTML.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        }else if (td4.innerHTML.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        }else {
          tr[i].style.display = "none";
        }
      }
    }
  }
  function sortTable(col) {
    if(sort_direction === 1){
      var table, rows, switching, i, x, y, shouldSwitch;
      table = document.getElementById("sessions-table");
      switching = true;
      while (switching) {
        switching = false;
        rows = table.getElementsByTagName("tr");
        for (i = 1; i < (rows.length - 1); i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName("td")[col];
          y = rows[i + 1].getElementsByTagName("td")[col];
          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
            shouldSwitch= true;
            break;
          }
        }
        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
        }
      }
      sort_direction = 0;
    }else{
      var table, rows, switching, i, x, y, shouldSwitch;
      table = document.getElementById("sessions-table");
      switching = true;
      while (switching) {
        switching = false;
        rows = table.getElementsByTagName("tr");
        for (i = 1; i < (rows.length - 1); i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName("td")[col];
          y = rows[i + 1].getElementsByTagName("td")[col];
          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
            shouldSwitch= true;
            break;
          }
        }
        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
        }
      }
      sort_direction = 1;
    }
  }
</script>
